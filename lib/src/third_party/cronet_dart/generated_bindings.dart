// Copyright (c) 2021, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to Cronet Dart API
class CronetDart {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CronetDart(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CronetDart.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Initialization
  int InitDartApiDL(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _InitDartApiDL(
      data,
    );
  }

  late final _InitDartApiDL_ptr =
      _lookup<ffi.NativeFunction<_c_InitDartApiDL>>('InitDartApiDL');
  late final _dart_InitDartApiDL _InitDartApiDL =
      _InitDartApiDL_ptr.asFunction<_dart_InitDartApiDL>();

  void InitCronetDartApi(
    ffi.Pointer<ffi.NativeFunction<EngineShutdownCallback>> engine_shutdown,
    ffi.Pointer<ffi.NativeFunction<EngineDestroyCallback>> engine_destroy,
    ffi.Pointer<ffi.NativeFunction<BufferCreateCallback>> buffer_create,
    ffi.Pointer<ffi.NativeFunction<BufferInitWithAllocCallback>>
        buffer_init_with_alloc,
    ffi.Pointer<ffi.NativeFunction<UrlResponseInfoHttpStatusCodeGetCallback>>
        status_code_get,
    ffi.Pointer<ffi.NativeFunction<ErrorMessageGetCallback>> error_message_get,
    ffi.Pointer<ffi.NativeFunction<UrlResponseInfoHttpStatusTextGetCallback>>
        http_status_text_get,
    ffi.Pointer<ffi.NativeFunction<UploadDataProviderGetClientContextCallback>>
        upload_provider_get_client_context,
    ffi.Pointer<ffi.NativeFunction<ExecutorCreateWithCallback>> create_with,
    ffi.Pointer<ffi.NativeFunction<ExecutorSetClientContextCallback>>
        set_client_context,
    ffi.Pointer<ffi.NativeFunction<ExecutorGetClientContextCallback>>
        get_client_context,
    ffi.Pointer<ffi.NativeFunction<ExecutorDestroyCallback>> executor_destroy,
    ffi.Pointer<ffi.NativeFunction<RunnableRunCallback>> runnable_run,
    ffi.Pointer<ffi.NativeFunction<RunnableDestroyCallback>> runnable_destroy,
  ) {
    return _InitCronetDartApi(
      engine_shutdown,
      engine_destroy,
      buffer_create,
      buffer_init_with_alloc,
      status_code_get,
      error_message_get,
      http_status_text_get,
      upload_provider_get_client_context,
      create_with,
      set_client_context,
      get_client_context,
      executor_destroy,
      runnable_run,
      runnable_destroy,
    );
  }

  late final _InitCronetDartApi_ptr =
      _lookup<ffi.NativeFunction<_c_InitCronetDartApi>>('InitCronetDartApi');
  late final _dart_InitCronetDartApi _InitCronetDartApi =
      _InitCronetDartApi_ptr.asFunction<_dart_InitCronetDartApi>();

  void RegisterHttpClient(
    Object h,
    ffi.Pointer<Cronet_EnginePtr> ce,
  ) {
    return _RegisterHttpClient(
      h,
      ce,
    );
  }

  late final _RegisterHttpClient_ptr =
      _lookup<ffi.NativeFunction<_c_RegisterHttpClient>>('RegisterHttpClient');
  late final _dart_RegisterHttpClient _RegisterHttpClient =
      _RegisterHttpClient_ptr.asFunction<_dart_RegisterHttpClient>();

  void RegisterCallbackHandler(
    int nativePort,
    ffi.Pointer<Cronet_UrlRequest> rp,
  ) {
    return _RegisterCallbackHandler(
      nativePort,
      rp,
    );
  }

  late final _RegisterCallbackHandler_ptr =
      _lookup<ffi.NativeFunction<_c_RegisterCallbackHandler>>(
          'RegisterCallbackHandler');
  late final _dart_RegisterCallbackHandler _RegisterCallbackHandler =
      _RegisterCallbackHandler_ptr.asFunction<_dart_RegisterCallbackHandler>();

  void RemoveRequest(
    ffi.Pointer<Cronet_UrlRequest> rp,
  ) {
    return _RemoveRequest(
      rp,
    );
  }

  late final _RemoveRequest_ptr =
      _lookup<ffi.NativeFunction<_c_RemoveRequest>>('RemoveRequest');
  late final _dart_RemoveRequest _RemoveRequest =
      _RemoveRequest_ptr.asFunction<_dart_RemoveRequest>();

  /// Callbacks
  void OnRedirectReceived(
    ffi.Pointer<Cronet_UrlRequestCallbackPtr> self,
    ffi.Pointer<Cronet_UrlRequest> request,
    ffi.Pointer<Cronet_UrlResponseInfoPtr> info,
    ffi.Pointer<ffi.Int8> newLocationUrl,
  ) {
    return _OnRedirectReceived(
      self,
      request,
      info,
      newLocationUrl,
    );
  }

  late final _OnRedirectReceived_ptr =
      _lookup<ffi.NativeFunction<Native_OnRedirectReceived>>(
          'OnRedirectReceived');
  late final _dart_OnRedirectReceived _OnRedirectReceived =
      _OnRedirectReceived_ptr.asFunction<_dart_OnRedirectReceived>();

  void OnResponseStarted(
    ffi.Pointer<Cronet_UrlRequestCallbackPtr> self,
    ffi.Pointer<Cronet_UrlRequest> request,
    ffi.Pointer<Cronet_UrlResponseInfoPtr> info,
  ) {
    return _OnResponseStarted(
      self,
      request,
      info,
    );
  }

  late final _OnResponseStarted_ptr =
      _lookup<ffi.NativeFunction<Native_OnResponseStarted>>(
          'OnResponseStarted');
  late final _dart_OnResponseStarted _OnResponseStarted =
      _OnResponseStarted_ptr.asFunction<_dart_OnResponseStarted>();

  void OnReadCompleted(
    ffi.Pointer<Cronet_UrlRequestCallbackPtr> self,
    ffi.Pointer<Cronet_UrlRequest> request,
    ffi.Pointer<Cronet_UrlResponseInfoPtr> info,
    ffi.Pointer<Cronet_BufferPtr> buffer,
    int bytes_read,
  ) {
    return _OnReadCompleted(
      self,
      request,
      info,
      buffer,
      bytes_read,
    );
  }

  late final _OnReadCompleted_ptr =
      _lookup<ffi.NativeFunction<Native_OnReadCompleted>>('OnReadCompleted');
  late final _dart_OnReadCompleted _OnReadCompleted =
      _OnReadCompleted_ptr.asFunction<_dart_OnReadCompleted>();

  void OnSucceeded(
    ffi.Pointer<Cronet_UrlRequestCallbackPtr> self,
    ffi.Pointer<Cronet_UrlRequest> request,
    ffi.Pointer<Cronet_UrlResponseInfoPtr> info,
  ) {
    return _OnSucceeded(
      self,
      request,
      info,
    );
  }

  late final _OnSucceeded_ptr =
      _lookup<ffi.NativeFunction<Native_OnSucceeded>>('OnSucceeded');
  late final _dart_OnSucceeded _OnSucceeded =
      _OnSucceeded_ptr.asFunction<_dart_OnSucceeded>();

  void OnFailed(
    ffi.Pointer<Cronet_UrlRequestCallbackPtr> self,
    ffi.Pointer<Cronet_UrlRequest> request,
    ffi.Pointer<Cronet_UrlResponseInfoPtr> info,
    ffi.Pointer<Cronet_ErrorPtr> error,
  ) {
    return _OnFailed(
      self,
      request,
      info,
      error,
    );
  }

  late final _OnFailed_ptr =
      _lookup<ffi.NativeFunction<Native_OnFailed>>('OnFailed');
  late final _dart_OnFailed _OnFailed =
      _OnFailed_ptr.asFunction<_dart_OnFailed>();

  void OnCanceled(
    ffi.Pointer<Cronet_UrlRequestCallbackPtr> self,
    ffi.Pointer<Cronet_UrlRequest> request,
    ffi.Pointer<Cronet_UrlResponseInfoPtr> info,
  ) {
    return _OnCanceled(
      self,
      request,
      info,
    );
  }

  late final _OnCanceled_ptr =
      _lookup<ffi.NativeFunction<Native_OnCanceled>>('OnCanceled');
  late final _dart_OnCanceled _OnCanceled =
      _OnCanceled_ptr.asFunction<_dart_OnCanceled>();

  /// Task executor
  ffi.Pointer<CronetTaskExecutor> CronetTaskExecutorCreate() {
    return _CronetTaskExecutorCreate();
  }

  late final _CronetTaskExecutorCreate_ptr =
      _lookup<ffi.NativeFunction<_c_CronetTaskExecutorCreate>>(
          'CronetTaskExecutorCreate');
  late final _dart_CronetTaskExecutorCreate _CronetTaskExecutorCreate =
      _CronetTaskExecutorCreate_ptr.asFunction<
          _dart_CronetTaskExecutorCreate>();

  void CronetTaskExecutorDestroy(
    ffi.Pointer<CronetTaskExecutor> executor,
  ) {
    return _CronetTaskExecutorDestroy(
      executor,
    );
  }

  late final _CronetTaskExecutorDestroy_ptr =
      _lookup<ffi.NativeFunction<_c_CronetTaskExecutorDestroy>>(
          'CronetTaskExecutorDestroy');
  late final _dart_CronetTaskExecutorDestroy _CronetTaskExecutorDestroy =
      _CronetTaskExecutorDestroy_ptr.asFunction<
          _dart_CronetTaskExecutorDestroy>();

  void InitCronetTaskExecutor(
    ffi.Pointer<CronetTaskExecutor> self,
  ) {
    return _InitCronetTaskExecutor(
      self,
    );
  }

  late final _InitCronetTaskExecutor_ptr =
      _lookup<ffi.NativeFunction<_c_InitCronetTaskExecutor>>(
          'InitCronetTaskExecutor');
  late final _dart_InitCronetTaskExecutor _InitCronetTaskExecutor =
      _InitCronetTaskExecutor_ptr.asFunction<_dart_InitCronetTaskExecutor>();

  ffi.Pointer<Cronet_ExecutorPtr> CronetTaskExecutor_Cronet_ExecutorPtr_get(
    ffi.Pointer<CronetTaskExecutor> self,
  ) {
    return _CronetTaskExecutor_Cronet_ExecutorPtr_get(
      self,
    );
  }

  late final _CronetTaskExecutor_Cronet_ExecutorPtr_get_ptr =
      _lookup<ffi.NativeFunction<_c_CronetTaskExecutor_Cronet_ExecutorPtr_get>>(
          'CronetTaskExecutor_Cronet_ExecutorPtr_get');
  late final _dart_CronetTaskExecutor_Cronet_ExecutorPtr_get
      _CronetTaskExecutor_Cronet_ExecutorPtr_get =
      _CronetTaskExecutor_Cronet_ExecutorPtr_get_ptr.asFunction<
          _dart_CronetTaskExecutor_Cronet_ExecutorPtr_get>();

  /// Upload data provider
  ffi.Pointer<UploadDataProvider> UploadDataProviderCreate() {
    return _UploadDataProviderCreate();
  }

  late final _UploadDataProviderCreate_ptr =
      _lookup<ffi.NativeFunction<_c_UploadDataProviderCreate>>(
          'UploadDataProviderCreate');
  late final _dart_UploadDataProviderCreate _UploadDataProviderCreate =
      _UploadDataProviderCreate_ptr.asFunction<
          _dart_UploadDataProviderCreate>();

  void UploadDataProviderDestroy(
    ffi.Pointer<UploadDataProvider> upload_data_provided,
  ) {
    return _UploadDataProviderDestroy(
      upload_data_provided,
    );
  }

  late final _UploadDataProviderDestroy_ptr =
      _lookup<ffi.NativeFunction<_c_UploadDataProviderDestroy>>(
          'UploadDataProviderDestroy');
  late final _dart_UploadDataProviderDestroy _UploadDataProviderDestroy =
      _UploadDataProviderDestroy_ptr.asFunction<
          _dart_UploadDataProviderDestroy>();

  void UploadDataProviderInit(
    ffi.Pointer<UploadDataProvider> self,
    int length,
    ffi.Pointer<Cronet_UrlRequest> request,
  ) {
    return _UploadDataProviderInit(
      self,
      length,
      request,
    );
  }

  late final _UploadDataProviderInit_ptr =
      _lookup<ffi.NativeFunction<_c_UploadDataProviderInit>>(
          'UploadDataProviderInit');
  late final _dart_UploadDataProviderInit _UploadDataProviderInit =
      _UploadDataProviderInit_ptr.asFunction<_dart_UploadDataProviderInit>();

  int UploadDataProvider_GetLength(
    ffi.Pointer<Cronet_UploadDataProviderPtr> self,
  ) {
    return _UploadDataProvider_GetLength(
      self,
    );
  }

  late final _UploadDataProvider_GetLength_ptr =
      _lookup<ffi.NativeFunction<Native_UploadDataProvider_GetLength>>(
          'UploadDataProvider_GetLength');
  late final _dart_UploadDataProvider_GetLength _UploadDataProvider_GetLength =
      _UploadDataProvider_GetLength_ptr.asFunction<
          _dart_UploadDataProvider_GetLength>();

  void UploadDataProvider_Read(
    ffi.Pointer<Cronet_UploadDataProviderPtr> self,
    ffi.Pointer<Cronet_UploadDataSinkPtr> upload_data_sink,
    ffi.Pointer<Cronet_BufferPtr> buffer,
  ) {
    return _UploadDataProvider_Read(
      self,
      upload_data_sink,
      buffer,
    );
  }

  late final _UploadDataProvider_Read_ptr =
      _lookup<ffi.NativeFunction<Native_UploadDataProvider_Read>>(
          'UploadDataProvider_Read');
  late final _dart_UploadDataProvider_Read _UploadDataProvider_Read =
      _UploadDataProvider_Read_ptr.asFunction<_dart_UploadDataProvider_Read>();

  void UploadDataProvider_Rewind(
    ffi.Pointer<Cronet_UploadDataProviderPtr> self,
    ffi.Pointer<Cronet_UploadDataSinkPtr> upload_data_sink,
  ) {
    return _UploadDataProvider_Rewind(
      self,
      upload_data_sink,
    );
  }

  late final _UploadDataProvider_Rewind_ptr =
      _lookup<ffi.NativeFunction<Native_UploadDataProvider_Rewind>>(
          'UploadDataProvider_Rewind');
  late final _dart_UploadDataProvider_Rewind _UploadDataProvider_Rewind =
      _UploadDataProvider_Rewind_ptr.asFunction<
          _dart_UploadDataProvider_Rewind>();

  void UploadDataProvider_Close(
    ffi.Pointer<Cronet_UploadDataProviderPtr> self,
  ) {
    return _UploadDataProvider_Close(
      self,
    );
  }

  late final _UploadDataProvider_Close_ptr =
      _lookup<ffi.NativeFunction<Native_UploadDataProvider_Close>>(
          'UploadDataProvider_Close');
  late final _dart_UploadDataProvider_Close _UploadDataProvider_Close =
      _UploadDataProvider_Close_ptr.asFunction<
          _dart_UploadDataProvider_Close>();

  late final addresses = _SymbolAddresses(this);
}

class _SymbolAddresses {
  final CronetDart _library;
  _SymbolAddresses(this._library);
  ffi.Pointer<ffi.NativeFunction<Native_OnRedirectReceived>>
      get OnRedirectReceived => _library._OnRedirectReceived_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_OnResponseStarted>>
      get OnResponseStarted => _library._OnResponseStarted_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_OnReadCompleted>> get OnReadCompleted =>
      _library._OnReadCompleted_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_OnSucceeded>> get OnSucceeded =>
      _library._OnSucceeded_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_OnFailed>> get OnFailed =>
      _library._OnFailed_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_OnCanceled>> get OnCanceled =>
      _library._OnCanceled_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_UploadDataProvider_GetLength>>
      get UploadDataProvider_GetLength =>
          _library._UploadDataProvider_GetLength_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_UploadDataProvider_Read>>
      get UploadDataProvider_Read => _library._UploadDataProvider_Read_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_UploadDataProvider_Rewind>>
      get UploadDataProvider_Rewind => _library._UploadDataProvider_Rewind_ptr;
  ffi.Pointer<ffi.NativeFunction<Native_UploadDataProvider_Close>>
      get UploadDataProvider_Close => _library._UploadDataProvider_Close_ptr;
}

class CronetTaskExecutor extends ffi.Opaque {}

class UploadDataProvider extends ffi.Opaque {}

class Cronet_EnginePtr extends ffi.Opaque {}

class Cronet_BufferPtr extends ffi.Opaque {}

class Cronet_UrlResponseInfoPtr extends ffi.Opaque {}

class Cronet_ErrorPtr extends ffi.Opaque {}

class Cronet_UploadDataProviderPtr extends ffi.Opaque {}

class Cronet_ExecutorPtr extends ffi.Opaque {}

class Cronet_RunnablePtr extends ffi.Opaque {}

class Cronet_UrlRequest extends ffi.Opaque {}

class Cronet_UrlRequestCallbackPtr extends ffi.Opaque {}

class Cronet_UploadDataSinkPtr extends ffi.Opaque {}

typedef _c_InitDartApiDL = ffi.IntPtr Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_InitDartApiDL = int Function(
  ffi.Pointer<ffi.Void> data,
);

typedef EngineShutdownCallback = ffi.Int32 Function(
  ffi.Pointer<Cronet_EnginePtr>,
);

typedef EngineDestroyCallback = ffi.Void Function(
  ffi.Pointer<Cronet_EnginePtr>,
);

typedef BufferCreateCallback = ffi.Pointer<Cronet_BufferPtr> Function();

typedef BufferInitWithAllocCallback = ffi.Void Function(
  ffi.Pointer<Cronet_BufferPtr>,
  ffi.Uint64,
);

typedef UrlResponseInfoHttpStatusCodeGetCallback = ffi.Int32 Function(
  ffi.Pointer<Cronet_UrlResponseInfoPtr>,
);

typedef ErrorMessageGetCallback = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<Cronet_ErrorPtr>,
);

typedef UrlResponseInfoHttpStatusTextGetCallback = ffi.Pointer<ffi.Int8>
    Function(
  ffi.Pointer<Cronet_UrlResponseInfoPtr>,
);

typedef UploadDataProviderGetClientContextCallback = ffi.Pointer<ffi.Void>
    Function(
  ffi.Pointer<Cronet_UploadDataProviderPtr>,
);

typedef Cronet_Executor_ExecuteFunc = ffi.Void Function(
  ffi.Pointer<Cronet_ExecutorPtr>,
  ffi.Pointer<Cronet_RunnablePtr>,
);

typedef ExecutorCreateWithCallback = ffi.Pointer<Cronet_ExecutorPtr> Function(
  ffi.Pointer<ffi.NativeFunction<Cronet_Executor_ExecuteFunc>>,
);

typedef ExecutorSetClientContextCallback = ffi.Void Function(
  ffi.Pointer<Cronet_ExecutorPtr>,
  ffi.Pointer<ffi.Void>,
);

typedef ExecutorGetClientContextCallback = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<Cronet_ExecutorPtr>,
);

typedef ExecutorDestroyCallback = ffi.Void Function(
  ffi.Pointer<Cronet_ExecutorPtr>,
);

typedef RunnableRunCallback = ffi.Void Function(
  ffi.Pointer<Cronet_RunnablePtr>,
);

typedef RunnableDestroyCallback = ffi.Void Function(
  ffi.Pointer<Cronet_RunnablePtr>,
);

typedef _c_InitCronetDartApi = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<EngineShutdownCallback>> engine_shutdown,
  ffi.Pointer<ffi.NativeFunction<EngineDestroyCallback>> engine_destroy,
  ffi.Pointer<ffi.NativeFunction<BufferCreateCallback>> buffer_create,
  ffi.Pointer<ffi.NativeFunction<BufferInitWithAllocCallback>>
      buffer_init_with_alloc,
  ffi.Pointer<ffi.NativeFunction<UrlResponseInfoHttpStatusCodeGetCallback>>
      status_code_get,
  ffi.Pointer<ffi.NativeFunction<ErrorMessageGetCallback>> error_message_get,
  ffi.Pointer<ffi.NativeFunction<UrlResponseInfoHttpStatusTextGetCallback>>
      http_status_text_get,
  ffi.Pointer<ffi.NativeFunction<UploadDataProviderGetClientContextCallback>>
      upload_provider_get_client_context,
  ffi.Pointer<ffi.NativeFunction<ExecutorCreateWithCallback>> create_with,
  ffi.Pointer<ffi.NativeFunction<ExecutorSetClientContextCallback>>
      set_client_context,
  ffi.Pointer<ffi.NativeFunction<ExecutorGetClientContextCallback>>
      get_client_context,
  ffi.Pointer<ffi.NativeFunction<ExecutorDestroyCallback>> executor_destroy,
  ffi.Pointer<ffi.NativeFunction<RunnableRunCallback>> runnable_run,
  ffi.Pointer<ffi.NativeFunction<RunnableDestroyCallback>> runnable_destroy,
);

typedef _dart_InitCronetDartApi = void Function(
  ffi.Pointer<ffi.NativeFunction<EngineShutdownCallback>> engine_shutdown,
  ffi.Pointer<ffi.NativeFunction<EngineDestroyCallback>> engine_destroy,
  ffi.Pointer<ffi.NativeFunction<BufferCreateCallback>> buffer_create,
  ffi.Pointer<ffi.NativeFunction<BufferInitWithAllocCallback>>
      buffer_init_with_alloc,
  ffi.Pointer<ffi.NativeFunction<UrlResponseInfoHttpStatusCodeGetCallback>>
      status_code_get,
  ffi.Pointer<ffi.NativeFunction<ErrorMessageGetCallback>> error_message_get,
  ffi.Pointer<ffi.NativeFunction<UrlResponseInfoHttpStatusTextGetCallback>>
      http_status_text_get,
  ffi.Pointer<ffi.NativeFunction<UploadDataProviderGetClientContextCallback>>
      upload_provider_get_client_context,
  ffi.Pointer<ffi.NativeFunction<ExecutorCreateWithCallback>> create_with,
  ffi.Pointer<ffi.NativeFunction<ExecutorSetClientContextCallback>>
      set_client_context,
  ffi.Pointer<ffi.NativeFunction<ExecutorGetClientContextCallback>>
      get_client_context,
  ffi.Pointer<ffi.NativeFunction<ExecutorDestroyCallback>> executor_destroy,
  ffi.Pointer<ffi.NativeFunction<RunnableRunCallback>> runnable_run,
  ffi.Pointer<ffi.NativeFunction<RunnableDestroyCallback>> runnable_destroy,
);

typedef _c_RegisterHttpClient = ffi.Void Function(
  ffi.Handle h,
  ffi.Pointer<Cronet_EnginePtr> ce,
);

typedef _dart_RegisterHttpClient = void Function(
  Object h,
  ffi.Pointer<Cronet_EnginePtr> ce,
);

typedef _c_RegisterCallbackHandler = ffi.Void Function(
  ffi.Int64 nativePort,
  ffi.Pointer<Cronet_UrlRequest> rp,
);

typedef _dart_RegisterCallbackHandler = void Function(
  int nativePort,
  ffi.Pointer<Cronet_UrlRequest> rp,
);

typedef _c_RemoveRequest = ffi.Void Function(
  ffi.Pointer<Cronet_UrlRequest> rp,
);

typedef _dart_RemoveRequest = void Function(
  ffi.Pointer<Cronet_UrlRequest> rp,
);

typedef Native_OnRedirectReceived = ffi.Void Function(
  ffi.Pointer<Cronet_UrlRequestCallbackPtr> self,
  ffi.Pointer<Cronet_UrlRequest> request,
  ffi.Pointer<Cronet_UrlResponseInfoPtr> info,
  ffi.Pointer<ffi.Int8> newLocationUrl,
);

typedef _dart_OnRedirectReceived = void Function(
  ffi.Pointer<Cronet_UrlRequestCallbackPtr> self,
  ffi.Pointer<Cronet_UrlRequest> request,
  ffi.Pointer<Cronet_UrlResponseInfoPtr> info,
  ffi.Pointer<ffi.Int8> newLocationUrl,
);

typedef Native_OnResponseStarted = ffi.Void Function(
  ffi.Pointer<Cronet_UrlRequestCallbackPtr> self,
  ffi.Pointer<Cronet_UrlRequest> request,
  ffi.Pointer<Cronet_UrlResponseInfoPtr> info,
);

typedef _dart_OnResponseStarted = void Function(
  ffi.Pointer<Cronet_UrlRequestCallbackPtr> self,
  ffi.Pointer<Cronet_UrlRequest> request,
  ffi.Pointer<Cronet_UrlResponseInfoPtr> info,
);

typedef Native_OnReadCompleted = ffi.Void Function(
  ffi.Pointer<Cronet_UrlRequestCallbackPtr> self,
  ffi.Pointer<Cronet_UrlRequest> request,
  ffi.Pointer<Cronet_UrlResponseInfoPtr> info,
  ffi.Pointer<Cronet_BufferPtr> buffer,
  ffi.Uint64 bytes_read,
);

typedef _dart_OnReadCompleted = void Function(
  ffi.Pointer<Cronet_UrlRequestCallbackPtr> self,
  ffi.Pointer<Cronet_UrlRequest> request,
  ffi.Pointer<Cronet_UrlResponseInfoPtr> info,
  ffi.Pointer<Cronet_BufferPtr> buffer,
  int bytes_read,
);

typedef Native_OnSucceeded = ffi.Void Function(
  ffi.Pointer<Cronet_UrlRequestCallbackPtr> self,
  ffi.Pointer<Cronet_UrlRequest> request,
  ffi.Pointer<Cronet_UrlResponseInfoPtr> info,
);

typedef _dart_OnSucceeded = void Function(
  ffi.Pointer<Cronet_UrlRequestCallbackPtr> self,
  ffi.Pointer<Cronet_UrlRequest> request,
  ffi.Pointer<Cronet_UrlResponseInfoPtr> info,
);

typedef Native_OnFailed = ffi.Void Function(
  ffi.Pointer<Cronet_UrlRequestCallbackPtr> self,
  ffi.Pointer<Cronet_UrlRequest> request,
  ffi.Pointer<Cronet_UrlResponseInfoPtr> info,
  ffi.Pointer<Cronet_ErrorPtr> error,
);

typedef _dart_OnFailed = void Function(
  ffi.Pointer<Cronet_UrlRequestCallbackPtr> self,
  ffi.Pointer<Cronet_UrlRequest> request,
  ffi.Pointer<Cronet_UrlResponseInfoPtr> info,
  ffi.Pointer<Cronet_ErrorPtr> error,
);

typedef Native_OnCanceled = ffi.Void Function(
  ffi.Pointer<Cronet_UrlRequestCallbackPtr> self,
  ffi.Pointer<Cronet_UrlRequest> request,
  ffi.Pointer<Cronet_UrlResponseInfoPtr> info,
);

typedef _dart_OnCanceled = void Function(
  ffi.Pointer<Cronet_UrlRequestCallbackPtr> self,
  ffi.Pointer<Cronet_UrlRequest> request,
  ffi.Pointer<Cronet_UrlResponseInfoPtr> info,
);

typedef _c_CronetTaskExecutorCreate = ffi.Pointer<CronetTaskExecutor>
    Function();

typedef _dart_CronetTaskExecutorCreate = ffi.Pointer<CronetTaskExecutor>
    Function();

typedef _c_CronetTaskExecutorDestroy = ffi.Void Function(
  ffi.Pointer<CronetTaskExecutor> executor,
);

typedef _dart_CronetTaskExecutorDestroy = void Function(
  ffi.Pointer<CronetTaskExecutor> executor,
);

typedef _c_InitCronetTaskExecutor = ffi.Void Function(
  ffi.Pointer<CronetTaskExecutor> self,
);

typedef _dart_InitCronetTaskExecutor = void Function(
  ffi.Pointer<CronetTaskExecutor> self,
);

typedef _c_CronetTaskExecutor_Cronet_ExecutorPtr_get
    = ffi.Pointer<Cronet_ExecutorPtr> Function(
  ffi.Pointer<CronetTaskExecutor> self,
);

typedef _dart_CronetTaskExecutor_Cronet_ExecutorPtr_get
    = ffi.Pointer<Cronet_ExecutorPtr> Function(
  ffi.Pointer<CronetTaskExecutor> self,
);

typedef _c_UploadDataProviderCreate = ffi.Pointer<UploadDataProvider>
    Function();

typedef _dart_UploadDataProviderCreate = ffi.Pointer<UploadDataProvider>
    Function();

typedef _c_UploadDataProviderDestroy = ffi.Void Function(
  ffi.Pointer<UploadDataProvider> upload_data_provided,
);

typedef _dart_UploadDataProviderDestroy = void Function(
  ffi.Pointer<UploadDataProvider> upload_data_provided,
);

typedef _c_UploadDataProviderInit = ffi.Void Function(
  ffi.Pointer<UploadDataProvider> self,
  ffi.Int64 length,
  ffi.Pointer<Cronet_UrlRequest> request,
);

typedef _dart_UploadDataProviderInit = void Function(
  ffi.Pointer<UploadDataProvider> self,
  int length,
  ffi.Pointer<Cronet_UrlRequest> request,
);

typedef Native_UploadDataProvider_GetLength = ffi.Int64 Function(
  ffi.Pointer<Cronet_UploadDataProviderPtr> self,
);

typedef _dart_UploadDataProvider_GetLength = int Function(
  ffi.Pointer<Cronet_UploadDataProviderPtr> self,
);

typedef Native_UploadDataProvider_Read = ffi.Void Function(
  ffi.Pointer<Cronet_UploadDataProviderPtr> self,
  ffi.Pointer<Cronet_UploadDataSinkPtr> upload_data_sink,
  ffi.Pointer<Cronet_BufferPtr> buffer,
);

typedef _dart_UploadDataProvider_Read = void Function(
  ffi.Pointer<Cronet_UploadDataProviderPtr> self,
  ffi.Pointer<Cronet_UploadDataSinkPtr> upload_data_sink,
  ffi.Pointer<Cronet_BufferPtr> buffer,
);

typedef Native_UploadDataProvider_Rewind = ffi.Void Function(
  ffi.Pointer<Cronet_UploadDataProviderPtr> self,
  ffi.Pointer<Cronet_UploadDataSinkPtr> upload_data_sink,
);

typedef _dart_UploadDataProvider_Rewind = void Function(
  ffi.Pointer<Cronet_UploadDataProviderPtr> self,
  ffi.Pointer<Cronet_UploadDataSinkPtr> upload_data_sink,
);

typedef Native_UploadDataProvider_Close = ffi.Void Function(
  ffi.Pointer<Cronet_UploadDataProviderPtr> self,
);

typedef _dart_UploadDataProvider_Close = void Function(
  ffi.Pointer<Cronet_UploadDataProviderPtr> self,
);
